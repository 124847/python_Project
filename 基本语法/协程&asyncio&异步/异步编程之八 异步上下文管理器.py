# -*- coding:utf-8 -*-
# author:LeiLei
# #with是从Python2.5引入的一个新的语法，它是一种上下文管理协议，目的在于从流程图中把 try,except 和finally 关键字和
#
# 资源分配释放相关代码统统去掉，简化try….except….finlally的处理流程。
#
# with通过__enter__方法初始化，然后在__exit__中做善后以及处理异常。
#
# 所以使用with处理的对象必须有__enter__()和__exit__()这两个方法。
#
# 其中__enter__()方法在语句体（with语句包裹起来的代码块）执行之前进入运行，__exit__()方法在语句体执行完毕退出后运行。
#
# with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，
# 比如文件使用后自动关闭、线程中锁的自动获取和释放等。
#with语句的工作原理：
# 紧跟with后面的语句会被求值，返回对象的__enter__()方法被调用，
# 这个方法的返回值将被赋值给as关键字后面的变量，当with后面的代码块全部被执行完之后，
# 将调用前面返回对象的__exit__()方法。
#  with语句最关键的地方在于被求值对象必须有__enter__()和__exit__()这两个方法，
#  那我们就可以通过自己实现这两方法来自定义with语句处理异常。
# 异步上下文管理器
# 此种对象通过定义 __aenter__()和__aexit__() 方法来对 async with 语句中的环境进行控制
# async with 也必须在协程函数中
