# -*- coding:utf-8 -*-
# author:LeiLei
# class 类名(Object): object是所有类的超类  类名用大驼峰规范   括号中的内容可以不写  括号也可以不写
# Python 3中所有的类都继承object类
# 创建对象  x = Dog()   类名加括号   魔法方法对象创建时自动调用  __名称__()
# 魔法方法 __init__(self)   相当于构造方法   self对象调用时自动传入不用显性传入
# 通过对象名调用时自动传入   但是通过类名.方法调用则python解释器不会自动传入self的值
# eg: def move(self)      x.move()  调用时自动传入 self即调用对象本身 即x   id(self) 和 id(x) 相等
# __str__()   相当于java tostring
# __del__()
# 析构函数
# 调用时机: 对象再内存中被销毁删除的时候(引用计数为0) 会自动调用__del__方法
# 引用计数是Python内存管理的一种机制，是指一块内存，有多少个变量在引用  当引用计数变为0时，这块内存被删除，内存中的数据被删除
# eg:
# x = [1,2]
# y = x
# del x
# print(y)   y依然有值为[1,2]   x的引用被删除  打印x报错
# 1.程序代码运行结束,在程序执行的过程中，创建的所有对象和变量都会被删除销毁 会自动调用__del__方法
# 2.使用del关键字变量，将这个对象的应用计数变为0 会自动调用__del__方法
# __repr__ 魔术方法和__str__相似   区别是 __repr__是直接返回汉字  而 __str__ 是返回引用地址即对象，再打印时才能打印出来
# 继承
# 单继承 多层继承   多继承 (python支持多继承即在括号里多写几个类) eg: class FA(object,Animal)
# 在子类中调父类的方法 方法一:父类名.方法(self)  self一定要传入 不然会报错
# 方法二: 父类名().方法名()  不用传self  就和java new 一个新对象 然后调用  匿名调用  没用变量引用而已 即没有等号左边 x = new Dog()
# 方法三: 使用 super(类名，self).方法    调用类名的父类的bark方法   但是调用此方法的类一定是括号内类名的子类或实例(即本身名)
# 即类名为当前调用类或者时当前调用类的的父类 即继承顺序链的下一级
# 如果确认类名时当前类时 此方法可写为 super().方法   即括号里不写默认为直接父类的方法
# 多继承 如果方法名相同则调用括号里面类按顺序来的方法   类名__mro__ 可以展现当前类的继承顺序链，也叫方法的调用顺序
# 私有权限 以两个下划线加在属性名和方法名前面 __  不能在类外部通过对象直接访问和使用，只能在类内部访问和使用 不能被子类继承
# 公有：不是私有的，就是公有的    实例对象__dict__ 可以常看对象具有的属性信息，类型是字典，字典的key是属性名，字典的value是属性值
# 类名.__dict__ 查看类属性              类属性实在方法外部定义的即每个实例的类属性都一样  类属性在内存中只有一份
# 实例属性实在__init__(self) 方法内部定义的所以实例属性可能不同
# 访问和修改类属性    类名.类属性 = ...  如果不存在和实例属性名相同的类属性，则可以通过实例对象访问类属性的值
# 如果存在重名 那么使用实例属性访问的一定是实例属性，不是类属性
# python 中的私有本质是 修改属性的名字，在创建对象的时候，会自动的修改属性名
# 即自动在属性名的前边叫上 _类名前缀
# 用set 和 get 方法修改私有属性和得到私有属性
# 实例方法  第一个参数为self  如果方法中使用实例属性
# @classmethod 装饰的方法称为类方法，第一个参数是cls 代表的是类对象自己
# 类方法  不需要使用实例属性 需要类属性   调用可以是 实例对象.类方法 也可以是类名.类方法调用
# 静态方法：使用@staticmethod 装饰的方法 称为静态方法，对参数没有特殊要求，可以有，可以没有
# 在不需要使用实例属性，同时也不需要使用类属性，此时可以将这个方法定义为静态方法  没有参数self
# 静态方法如果有参数，就必须传递实参值
# 多态 步骤 子类继承父类 子类重写父类中的方法 通过对象调用这个方法   即在类外面定义一个方法传入对象不同，调用的方法内容不同
# 面向对象的一般步骤
# 一个类作为一个python文件
# 定义一个main.py作为程序代码的启动文件
class Animal(object):
    def __init__(self):
        pass

    def play(self):
        print('愉快的玩耍')


class Dog(object):
    def __init__(self):
        pass
    def play(self):
        print('汪汪')


class Xiao(Dog, Animal):
    class_ha = '233'

    def play(self):
        super().play()
        print('123')
        print(self.class_ha)

if __name__ == '__main__':

    Animal().play()